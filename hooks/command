#!/usr/bin/env bash

set -euo pipefail

get_ecr_url() {
  local repository_name="${1}"
  local registry_id="${2}"
  local region="${3}"

  aws ecr describe-repositories \
    --region "${region}" \
    --repository-names "${repository_name}" \
    --registry-id "${registry_id}" \
    --output text \
    --query 'repositories[0].repositoryUri'
}

read_build_args() {
  local property="${1}"

  if read_list_property "${property}"; then
    for arg in "${result[@]}"; do
      build_args+=('--build-arg' "${arg}")
    done
  fi
}

read_caches_from() {
  if read_list_property 'CACHE_FROM'; then
    for cache in "${result[@]}"; do
      if [[ ${cache} == ecr://* ]]; then
        local image
        local tag

        image="${cache:6}"
        tag="${image##*:}"

        if [[ ${image} == "${tag}" ]]; then
          tag='latest'
        else
          image="${image%:*}"
        fi

        for region in "${regions[@]}"; do

          echo "Logging in to ECR, region: ${region}"
          ecr_login "$region" "$account_id"

          cache="$(get_ecr_url "${image}" "${account_id}" "${region}"):${tag}"

          docker pull "${cache}" || true
          caches_from+=('--cache-from' "${cache}")

        done
      fi

    done
  fi
}

read_tags() {
  local property="${1}"

  if read_list_property "${property}"; then
    tags+=("${result[@]}")
  fi
}

read_regions() {

  if [[ -z ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_REGION_0:-} && -z ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_REGIONS_0:-} ]]; then
    regions+=("${AWS_DEFAULT_REGION:-eu-west-1}")
  else
    if [[ read_list_property 'REGION' ]] || [[ read_list_property 'REGIONS' ]]; then
      for region in "${result[@]}"; do
        regions+=("${region}")
      done
    fi
  fi
}

# read a plugin property of type [array, string] into a Bash array. Buildkite
# exposes a string value at BUILDKITE_PLUGIN_{NAME}_{KEY}, and array values at
# BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}.
read_list_property() {
  local prefix="BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_${1}"
  local property="${prefix}_0"

  result=()

  if [[ -n ${!property:-} ]]; then
    local i=0
    local property="${prefix}_${i}"

    while [[ -n ${!property:-} ]]; do
      result+=("${!property}")

      i=$((i+1))
      property="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    result+=("${!prefix}")
  fi

  [[ ${#result[@]} -gt 0 ]] || return 1
}

push_tags() {
  local tags=("${@}")

  for region in "${regions[@]}"; do

    echo "Logging in to ECR, region: ${region}"
    ecr_login "$region" "$account_id"

    image="$(get_ecr_url "${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME}" "${account_id}" "${region}")"

    for tag in "${tags[@]}"; do
      echo "Tag: '${tag}'"
      docker tag "${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME}" "${image}:${tag}"
      docker push "${image}:${tag}"
    done

  done
}

ecr_login() {
  local region="${1}"
  local account_id="${2}"

  aws ecr get-login-password \
    --region "${region}" \
    | docker login \
    --username AWS \
    --password-stdin "${account_id}".dkr.ecr."${region}".amazonaws.com
}

if [[ -z ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME:-} ]]; then
  echo "'ecr-name' property is required"
  exit 1
fi

echo '--- Reading plugin parameters'

dockerfile="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_DOCKERFILE:-Dockerfile}"
build_context="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_BUILD_CONTEXT:-.}"
target="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_TARGET:-}"

build_args=()
caches_from=()
tags=("${BUILDKITE_BUILD_NUMBER}")

regions=()

read_build_args 'ARGS'
read_tags 'TAGS'

if [[ ${BUILDKITE_BRANCH} == "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}" ]]; then
  read_build_args 'DEFAULT_ARGS'
  read_tags 'DEFAULT_TAGS'
  # Do not add the latest tag if pipeline has requested not to
  if [[ "${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ADD_LATEST_TAG:-true}" =~ ^(true|on|1)$ ]] ; then
      tags+=('latest')
  fi
else
  read_build_args 'BRANCH_ARGS'
  read_tags 'BRANCH_TAGS'
fi

# set target arg if target was specified
target_arg=""
if [[ -n ${target} ]]; then
  target_arg="--target ${target}"
fi

read_regions

if [[ -n ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ACCOUNT_ID:-} ]]; then
  account_id="${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ACCOUNT_ID}"
else
  account_id="$(aws sts get-caller-identity --output text | cut -f1)"
fi

read_caches_from

echo '--- Building Docker image'
if [[ -n ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ADDITIONAL_BUILD_ARGS:-} ]]; then
  echo "Additional build args: ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ADDITIONAL_BUILD_ARGS}"
fi
echo "Build args:" ${build_args[@]+"${build_args[@]}"}
echo "Cache from:" ${caches_from[@]+"${caches_from[@]}"}
echo "Dockerfile: ${dockerfile}"
echo "Build context: ${build_context}"
echo "Target: ${target}"
docker build \
  --file "${dockerfile}" \
  --tag "${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ECR_NAME}" \
  ${BUILDKITE_PLUGIN_DOCKER_ECR_PUBLISH_ADDITIONAL_BUILD_ARGS:-} \
  ${build_args[@]+"${build_args[@]}"} \
  ${caches_from[@]+"${caches_from[@]}"} \
  ${target_arg} \
  "${build_context}"

echo '--- Pushing Docker image'
push_tags "${tags[@]}"
